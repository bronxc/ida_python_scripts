import idaapi
import idautils
#from idaapi import plugin_t
import requests
import json

from idaapi import PluginForm
from PyQt5.QtWidgets import QLineEdit, QCheckBox, QPushButton, QLabel, QComboBox, QVBoxLayout, QHBoxLayout, QGridLayout
from PyQt5.QtGui import QColor
from PyQt5.QtCore import Qt, QObject

# from ida_kernwin import *


class malwaresForm(PluginForm):
    def pr(self):
        a = malwares()
        print a.IP_or_hostname_search(self.lineEdit1.text(),1)

    def OnCreate(self, form):
        self.parent = self.FormToPyQtWidget(form)
        self.label1 = QLabel("Input: ")
        self.label2 = QLabel("malwares.com search tool")
        self.label2.setAlignment(Qt.AlignCenter | Qt.AlignVCenter)

        self.lineEdit1 = QLineEdit()
        self.pushButton1 = QPushButton("Enter")
        self.pushButton1.clicked.connect(self.pr)

        layout = QVBoxLayout()
        layout.addWidget(self.label2)

        QH1 = QGridLayout()
        QH1.addWidget(self.label1, 0, 0)
        QH1.addWidget(self.lineEdit1, 0, 1)
        QH1.addWidget(self.pushButton1, 0, 2)
        layout.addLayout(QH1)

        self.parent.setLayout(layout)

    def OnClose(self, form):
        pass

class malwares():
    def __init__(self):
        self.api_key = "<api-key>"

    def hash_search(self, sha256):
        detection_binary = []
        params = {'api_key': self.api_key, 'hash': sha256}
        response = requests.get('https://www.malwares.com/api/v2/file/mwsinfo', params=params)
        json_response = response.json()
        try:
            virustotal_result = str(json_response['virustotal']['positives']) + "/" + str(json_response['virustotal']['total'])
        except:
            virustotal_result = ""

        try:
            for anal_envir in json_response['behavior'].keys():
                for i in json_response['behavior'][anal_envir]:
                    detection_binary.append(i['path'])
        except:
            detection_binary = []

        ai_score = json_response['ai_score']
        taglist = json_response['taglist']

        response = requests.get('https://www.malwares.com/api/v2/file/addinfo', params=params)
        json_response = response.json()
        try:
            another_filename = json_response['filename']
        except:
            another_filename = ""

        return {'virustotal_result':virustotal_result, 'detection_binary':detection_binary, 'ai_score':ai_score, 'taglist':taglist, 'another_filename':another_filename}

    def URL_search(self, URL):
        same_hostname = []
        params = {'api_key': self.api_key, 'url':URL}
        response = requests.post('https://www.malwares.com/api/v2/url/info', data=params)
        json_response = response.json()
        positives = json_response['virustotal']['positives']
        for data in json_response['same_hostname']['list']:
            try:
                same_hostname.append([data['url'], str(data['positive']) + "/" + str(data['total'])])
            except:
                same_hostname.append(data['url'])

        return {'positives':positives, 'same_hostname':same_hostname}

    def IP_or_hostname_search(self, data, string_type):
        undetected_sample_communicated = []
        detected_sample_communicated = []
        detected_sample_downloaded = []
        undetected_sample_downloaded = []
        hostname_history = []

        if string_type == 1:
            string_type = "ip"
        elif string_type == 2:
            string_type = "hostname"
        else:
            string_type = "error"

        params = {'api_key': self.api_key, string_type: data}
        response = requests.get('https://www.malwares.com/api/v2/'+string_type+'/info', params=params)
        response_json = response.json()

        try:
            for sample_list in response_json['undetected_communicating_file']['list']:
                undetected_sample_communicated.append(sample_list['sha256'])
        except:
            undetected_sample_communicated = []

        try:
            for sample_list in response_json['detected_communicating_file']['list']:
                detected_sample_communicated.append([sample_list['sha256'], str(sample_list['positives']) + "/" + str(sample_list['total'])])
        except:
            detected_sample_communicated = []

        try:
            for sample_list in response_json['detected_downloaded_file']['list']:
                detected_sample_downloaded.append([sample_list['sha256'], str(sample_list['positives']) + "/" + str(sample_list['total'])])
        except:
            detected_sample_downloaded = []

        try:
            for sample_list in response_json['undetected_downloaded_file']['list']:
                undetected_sample_downloaded.append(sample_list['sha256'])
        except:
            undetected_sample_downloaded = []

        try:
            whois = response_json['whois']
        except:
            whois = ""

        try:
            location = response_json['location']['cname']
        except:
            location = ""

        try:
            for hostname_list in response_json['hostname_history']['list']:
                hostname_history.append(hostname_list['hostname'])
        except:
            hostname_history = []

        return {'undetected_sample_communicated':undetected_sample_communicated, 'detected_sample_communicated':detected_sample_communicated,
        'detected_sample_downloaded':detected_sample_downloaded, 'undetected_sample_downloaded':undetected_sample_downloaded,
        'hostname_history':hostname_history, 'whois':whois, 'location':location}

if __name__ == "__main__":
    #a = malwares()
    #print(a.IP_or_hostname_search("61.106.2.96",1))
    plg = malwaresForm()
    plg.Show("malwares.com")